Creating email automation in Python typically involves using a library such as `smtplib` or `yaml` to send emails, and a library such as `schedule` or `APScheduler` to schedule the sending of emails. Here's a basic example of how you might set up email automation using Python:

1. First, you'll need to import the necessary libraries. For this example, we'll use `smtplib` and `schedule`.
```
import smtplib
import schedule
import time
```
2. Next, you'll need to set up your email server information. This will include your SMTP server, port, and login credentials.
```
smtp_server = 'smtp.gmail.com'
smtp_port = 587
smtp_username = 'your_email@gmail.com'
smtp_password = 'your_password'
```
3. Now, you can set up a function that will be called when it's time to send an email. This function should include the recipient's email address, the subject of the email, and the body of the email.
```
def send_email(recipient, subject, body):
    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(smtp_username, smtp_password)
        msg = f'Subject: {subject}\n\n{body}'
        server.sendmail(smtp_username, recipient, msg)
```
4. Now you can schedule the sending of the email using the `schedule` library. For example, you can schedule the email to be sent every day at 9am.
```
schedule.every().day.at("09:00").do(send_email, recipient='recipient_email@gmail.com', subject='Daily Email', body='This is the body of the email.')
```
5. Finally, you can start the scheduler and let it run indefinitely.
```
while True:
    schedule.run_pending()
    time.sleep(1)
```
This is a basic example of how you can set up email automation in Python. However, you can customize and expand upon this example to suit your specific needs. For example, you can use a yaml file to store your email templates and recipient list, or you can use a more advanced library such as `apscheduler` to schedule and manage your tasks.

Please note that this is just a basic example, and you should consider security aspects when sending email via script, you can use smtplib's TLS or SSL method to secure the connection. Also, you should use environment variables to store your credentials instead of hardcoding them in the script.

Please let me know if you have any other question or if there is anything else I can help you with.